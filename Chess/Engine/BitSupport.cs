using System;
using System.Text;

namespace Engine
{
    public static class BitSupport
    {
        public const ulong WhiteSquares = 0x55AA55AA55AA55AA;
        public const ulong BlackSquares = 0xAA55AA55AA55AA55;
        public static readonly ulong[] WhitePawns = new ulong[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1030000, 0x2070000, 0x40E0000, 0x81C0000, 0x10380000, 0x20700000, 0x40E00000, 0x80C00000, 0x3000000, 0x7000000, 0xE000000, 0x1C000000, 0x38000000, 0x70000000, 0xE0000000, 0xC0000000, 0x300000000, 0x700000000, 0xE00000000, 0x1C00000000, 0x3800000000, 0x7000000000, 0xE000000000, 0xC000000000, 0x30000000000, 0x70000000000, 0xE0000000000, 0x1C0000000000, 0x380000000000, 0x700000000000, 0xE00000000000, 0xC00000000000, 0x3000000000000, 0x7000000000000, 0xE000000000000, 0x1C000000000000, 0x38000000000000, 0x70000000000000, 0xE0000000000000, 0xC0000000000000, 0x300000000000000, 0x700000000000000, 0xE00000000000000, 0x1C00000000000000, 0x3800000000000000, 0x7000000000000000, 0xE000000000000000, 0xC000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        public static readonly ulong[] BlackPawns = new ulong[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x7, 0xE, 0x1C, 0x38, 0x70, 0xE0, 0xC0, 0x300, 0x700, 0xE00, 0x1C00, 0x3800, 0x7000, 0xE000, 0xC000, 0x30000, 0x70000, 0xE0000, 0x1C0000, 0x380000, 0x700000, 0xE00000, 0xC00000, 0x3000000, 0x7000000, 0xE000000, 0x1C000000, 0x38000000, 0x70000000, 0xE00000, 0xC0000000, 0x300000000, 0x700000000, 0xE00000000, 0x1C00000000, 0x3800000000, 0x7000000000, 0xE0000000, 0xC000000000, 0x30000000000, 0x70000000000, 0xE0000000000, 0x1C0000000000, 0x380000000000, 0x700000000000, 0xE000000000, 0xC00000000000, 0x30100000000, 0x70200000000, 0xE0400000000, 0x1C0800000000, 0x381000000000, 0x702000000000, 0xE04000000000, 0xC08000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
        public static readonly ulong[] KnightJumps = new ulong[] { 0x20400, 0x50800, 0xA1100, 0x142200, 0x284400, 0x508800, 0xA01000, 0x402000, 0x2040004, 0x5080008, 0xA110011, 0x14220022, 0x28440044, 0x50880088, 0xA0100010, 0x40200020, 0x204000402, 0x508000805, 0xA1100110A, 0x1422002214, 0x2844004428, 0x5088008850, 0xA0100010A0, 0x4020002040, 0x20400040200, 0x50800080500, 0xA1100110A00, 0x142200221400, 0x284400442800, 0x508800885000, 0xA0100010A000, 0x402000204000, 0x2040004020000, 0x5080008050000, 0xA1100110A0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xA0100010A00000, 0x40200020400000, 0x204000402000000, 0x508000805000000, 0xA1100110A000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xA0100010A0000000, 0x4020002040000000, 0x400040200000000, 0x800080500000000, 0x1100110A00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010A000000000, 0x2000204000000000, 0x4020000000000, 0x8050000000000, 0x110A0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10A00000000000, 0x20400000000000 };
        public static readonly ulong[] Diagonals = new ulong[] { 0x8040201008040200, 0x80402010080500, 0x804020110A00, 0x8041221400, 0x182442800, 0x10204885000, 0x102040810A000, 0x102040810204000, 0x4020100804020002, 0x8040201008050005, 0x804020110A000A, 0x804122140014, 0x18244280028, 0x1020488500050, 0x102040810A000A0, 0x204081020400040, 0x2010080402000204, 0x4020100805000508, 0x804020110A000A11, 0x80412214001422, 0x1824428002844, 0x102048850005088, 0x2040810A000A010, 0x408102040004020, 0x1008040200020408, 0x2010080500050810, 0x4020110A000A1120, 0x8041221400142241, 0x182442800284482, 0x204885000508804, 0x40810A000A01008, 0x810204000402010, 0x804020002040810, 0x1008050005081020, 0x20110A000A112040, 0x4122140014224180, 0x8244280028448201, 0x488500050880402, 0x810A000A0100804, 0x1020400040201008, 0x402000204081020, 0x805000508102040, 0x110A000A11204080, 0x2214001422418000, 0x4428002844820100, 0x8850005088040201, 0x10A000A010080402, 0x2040004020100804, 0x200020408102040, 0x500050810204080, 0xA000A1120408000, 0x1400142241800000, 0x2800284482010000, 0x5000508804020100, 0xA000A01008040201, 0x4000402010080402, 0x2040810204080, 0x5081020408000, 0xA112040800000, 0x14224180000000, 0x28448201000000, 0x50880402010000, 0xA0100804020100, 0x40201008040201 };
        public static readonly ulong[] Straights = new ulong[] { 0x1010101010101FE, 0x2020202020202FD, 0x4040404040404FB, 0x8080808080808F7, 0x10101010101010EF, 0x20202020202020DF, 0x40404040404040BF, 0x808080808080807F, 0x10101010101FE01, 0x20202020202FD02, 0x40404040404FB04, 0x80808080808F708, 0x101010101010EF10, 0x202020202020DF20, 0x404040404040BF40, 0x8080808080807F80, 0x101010101FE0101, 0x202020202FD0202, 0x404040404FB0404, 0x808080808F70808, 0x1010101010EF1010, 0x2020202020DF2020, 0x4040404040BF4040, 0x80808080807F8080, 0x1010101FE010101, 0x2020202FD020202, 0x4040404FB040404, 0x8080808F7080808, 0x10101010EF101010, 0x20202020DF202020, 0x40404040BF404040, 0x808080807F808080, 0x10101FE01010101, 0x20202FD02020202, 0x40404FB04040404, 0x80808F708080808, 0x101010EF10101010, 0x202020DF20202020, 0x404040BF40404040, 0x8080807F80808080, 0x101FE0101010101, 0x202FD0202020202, 0x404FB0404040404, 0x808F70808080808, 0x1010EF1010101010, 0x2020DF2020202020, 0x4040BF4040404040, 0x80807F8080808080, 0x1FE010101010101, 0x2FD020202020202, 0x4FB040404040404, 0x8F7080808080808, 0x10EF101010101010, 0x20DF202020202020, 0x40BF404040404040, 0x807F808080808080, 0xFE01010101010101, 0xFD02020202020202, 0xFB04040404040404, 0xF708080808080808, 0xEF10101010101010, 0xDF20202020202020, 0xBF40404040404040, 0x7F80808080808080 };
        public static readonly ulong[] KingMoveOptions = new ulong[] { 0x302, 0x705, 0xE0A, 0x1C14, 0x3828, 0x7050, 0xE0A0, 0xC040, 0x30203, 0x70507, 0xE0A0E, 0x1C141C, 0x382838, 0x705070, 0xE0A0E0, 0xC040C0, 0x3020300, 0x7050700, 0xE0A0E00, 0x1C141C00, 0x38283800, 0x70507000, 0xE0A0E000, 0xC040C000, 0x302030000, 0x705070000, 0xE0A0E0000, 0x1C141C0000, 0x3828380000, 0x7050700000, 0xE0A0E00000, 0xC040C00000, 0x30203000000, 0x70507000000, 0xE0A0E000000, 0x1C141C000000, 0x382838000000, 0x705070000000, 0xE0A0E0000000, 0xC040C0000000, 0x3020300000000, 0x7050700000000, 0xE0A0E00000000, 0x1C141C00000000, 0x38283800000000, 0x70507000000000, 0xE0A0E000000000, 0xC040C000000000, 0x302030000000000, 0x705070000000000, 0xE0A0E0000000000, 0x1C141C0000000000, 0x3828380000000000, 0x7050700000000000, 0xE0A0E00000000000, 0xC040C00000000000, 0x203000000000000, 0x507000000000000, 0xA0E000000000000, 0x141C000000000000, 0x2838000000000000, 0x5070000000000000, 0xA0E0000000000000, 0x40C0000000000000 };
        public static readonly ulong[][] Lines = new ulong[][] {
            new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x0, 0x204, 0x408, 0x810, 0x1020, 0x2040, 0x4080, 0x8000, 0x0, 0x20408, 0x40810, 0x81020, 0x102040, 0x204080, 0x408000, 0x800000, 0x0, 0x2040810, 0x4081020, 0x8102040, 0x10204080, 0x20408000, 0x40800000, 0x80000000, 0x0, 0x204081020, 0x408102040, 0x810204080, 0x1020408000, 0x2040800000, 0x4080000000, 0x8000000000, 0x0, 0x20408102040, 0x40810204080, 0x81020408000, 0x102040800000, 0x204080000000, 0x408000000000, 0x800000000000, 0x0, 0x2040810204080, 0x4081020408000, 0x8102040800000, 0x10204080000000, 0x20408000000000, 0x40800000000000, 0x80000000000000, 0x0 },
            new ulong[] {0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x0, 0xFE00, 0xFC00, 0xF800, 0xF000, 0xE000, 0xC000, 0x8000, 0x0, 0xFE0000, 0xFC0000, 0xF80000, 0xF00000, 0xE00000, 0xC00000, 0x800000, 0x0, 0xFE000000, 0xFC000000, 0xF8000000, 0xF0000000, 0xE0000000, 0xC0000000, 0x80000000, 0x0, 0xFE00000000, 0xFC00000000, 0xF800000000, 0xF000000000, 0xE000000000, 0xC000000000, 0x8000000000, 0x0, 0xFE0000000000, 0xFC0000000000, 0xF80000000000, 0xF00000000000, 0xE00000000000, 0xC00000000000, 0x800000000000, 0x0, 0xFE000000000000, 0xFC000000000000, 0xF8000000000000, 0xF0000000000000, 0xE0000000000000, 0xC0000000000000, 0x80000000000000, 0x0, 0xFE00000000000000, 0xFC00000000000000, 0xF800000000000000, 0xF000000000000000, 0xE000000000000000, 0xC000000000000000, 0x8000000000000000, 0x0 },
            new ulong[] {0x8040201008040200, 0x80402010080400, 0x804020100800, 0x8040201000, 0x80402000, 0x804000, 0x8000, 0x0, 0x4020100804020000, 0x8040201008040000, 0x80402010080000, 0x804020100000, 0x8040200000, 0x80400000, 0x800000, 0x0, 0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x80402010000000, 0x804020000000, 0x8040000000, 0x80000000, 0x0, 0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x80402000000000, 0x804000000000, 0x8000000000, 0x0, 0x804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x80400000000000, 0x800000000000, 0x0, 0x402000000000000, 0x804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x80000000000000, 0x0, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
            new ulong[] {0x101010101010100, 0x202020202020200, 0x404040404040400, 0x808080808080800, 0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000, 0x101010101010000, 0x202020202020000, 0x404040404040000, 0x808080808080000, 0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000, 0x101010101000000, 0x202020202000000, 0x404040404000000, 0x808080808000000, 0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000, 0x101010100000000, 0x202020200000000, 0x404040400000000, 0x808080800000000, 0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000, 0x101010000000000, 0x202020000000000, 0x404040000000000, 0x808080000000000, 0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000, 0x101000000000000, 0x202000000000000, 0x404000000000000, 0x808000000000000, 0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
            new ulong[] {0x0, 0x100, 0x10200, 0x1020400, 0x102040800, 0x10204081000, 0x1020408102000, 0x102040810204000, 0x0, 0x10000, 0x1020000, 0x102040000, 0x10204080000, 0x1020408100000, 0x102040810200000, 0x204081020400000, 0x0, 0x1000000, 0x102000000, 0x10204000000, 0x1020408000000, 0x102040810000000, 0x204081020000000, 0x408102040000000, 0x0, 0x100000000, 0x10200000000, 0x1020400000000, 0x102040800000000, 0x204081000000000, 0x408102000000000, 0x810204000000000, 0x0, 0x10000000000, 0x1020000000000, 0x102040000000000, 0x204080000000000, 0x408100000000000, 0x810200000000000, 0x1020400000000000, 0x0, 0x1000000000000, 0x102000000000000, 0x204000000000000, 0x408000000000000, 0x810000000000000, 0x1020000000000000, 0x2040000000000000, 0x0, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 },
            new ulong[] {0x0, 0x1, 0x3, 0x7, 0xF, 0x1F, 0x3F, 0x7F, 0x0, 0x100, 0x300, 0x700, 0xF00, 0x1F00, 0x3F00, 0x7F00, 0x0, 0x10000, 0x30000, 0x70000, 0xF0000, 0x1F0000, 0x3F0000, 0x7F0000, 0x0, 0x1000000, 0x3000000, 0x7000000, 0xF000000, 0x1F000000, 0x3F000000, 0x7F000000, 0x0, 0x100000000, 0x300000000, 0x700000000, 0xF00000000, 0x1F00000000, 0x3F00000000, 0x7F00000000, 0x0, 0x10000000000, 0x30000000000, 0x70000000000, 0xF0000000000, 0x1F0000000000, 0x3F0000000000, 0x7F0000000000, 0x0, 0x1000000000000, 0x3000000000000, 0x7000000000000, 0xF000000000000, 0x1F000000000000, 0x3F000000000000, 0x7F000000000000, 0x0, 0x100000000000000, 0x300000000000000, 0x700000000000000, 0xF00000000000000, 0x1F00000000000000, 0x3F00000000000000, 0x7F00000000000000 },
            new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x0, 0x100, 0x201, 0x402, 0x804, 0x1008, 0x2010, 0x4020, 0x0, 0x10000, 0x20100, 0x40201, 0x80402, 0x100804, 0x201008, 0x402010, 0x0, 0x1000000, 0x2010000, 0x4020100, 0x8040201, 0x10080402, 0x20100804, 0x40201008, 0x0, 0x100000000, 0x201000000, 0x402010000, 0x804020100, 0x1008040201, 0x2010080402, 0x4020100804, 0x0, 0x10000000000, 0x20100000000, 0x40201000000, 0x80402010000, 0x100804020100, 0x201008040201, 0x402010080402, 0x0, 0x1000000000000, 0x2010000000000, 0x4020100000000, 0x8040201000000, 0x10080402010000, 0x20100804020100, 0x40201008040201 },
            new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x101, 0x202, 0x404, 0x808, 0x1010, 0x2020, 0x4040, 0x8080, 0x10101, 0x20202, 0x40404, 0x80808, 0x101010, 0x202020, 0x404040, 0x808080, 0x1010101, 0x2020202, 0x4040404, 0x8080808, 0x10101010, 0x20202020, 0x40404040, 0x80808080, 0x101010101, 0x202020202, 0x404040404, 0x808080808, 0x1010101010, 0x2020202020, 0x4040404040, 0x8080808080, 0x10101010101, 0x20202020202, 0x40404040404, 0x80808080808, 0x101010101010, 0x202020202020, 0x404040404040, 0x808080808080, 0x1010101010101, 0x2020202020202, 0x4040404040404, 0x8080808080808, 0x10101010101010, 0x20202020202020, 0x40404040404040, 0x80808080808080 }
        };
        
        public static ulong[] Basic = new ulong[] { 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000, 0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x100000000, 0x200000000, 0x400000000, 0x800000000, 0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000, 0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000, 0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000, 0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000, 0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000, 0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000 };

        /// <summary>
        /// Count how many bits in the number are set.
        /// </summary>
        /// <param name="data">64-bits</param>
        /// <param name="max">In case we're only interested in a limited count.</param>
        /// <returns></returns>
        public static int OnesCount(ulong data, int max = Board.Size)
        {
            if (data <= 0)
            {
                return 0;
            }
            
            int count = 0, bits = 0;
            ulong mask = 1;
            while (count < max && count < Board.Size && mask <= data)
            {
                if ((data & mask) > 0)
                {
                    count++;
                }

                bits++;
                mask <<= 1;
            }

            return count;
        }

        public static readonly int[] LeastSignificantBitTable = new int[]
{ 
   63, 30,  3, 32, 59, 14, 11, 33,
   60, 24, 50,  9, 55, 19, 21, 34,
   61, 29,  2, 53, 51, 23, 41, 18,
   56, 28,  1, 43, 46, 27,  0, 35,
   62, 31, 58,  4,  5, 49, 54,  6,
   15, 52, 12, 40,  7, 42, 45, 16,
   25, 57, 48, 13, 10, 39,  8, 44,
   20, 47, 38, 22, 17, 37, 36, 26
};

        /**
         * bitScanForward
         * @author Matt Taylor (2003)
         * @param bb bit board to scan
         * @precondition bb != 0
         * @return index (0..63) of least significant one bit
         */
        public static int bitScanForward(ulong bb)
        {
            if (bb == 0)
            {
                throw new ArgumentOutOfRangeException("There must be a value in the given bit board.");
            }
            uint folded;
            bb ^= bb - 1;
            folded = (uint)(bb ^ (bb >> 32));
            return LeastSignificantBitTable[folded * 0x78291ACF >> 26];
        }

        /// <summary>
        /// Count how many bits in the number are set.
        /// </summary>
        /// <param name="data">64-bits</param>
        /// <param name="max">In case we're only interested in a limited count.</param>
        /// <returns></returns>
        public static String PrintMask(ulong data)
        {
            if (data <= 0)
            {
                return "";
            }

            var result = new StringBuilder();
            ulong mask = 1;
            for (int i = 0; i < Board.Size; i++)
            {
                result.Append(((data & mask) == 0) ? '=': '1');
                mask <<= 1;
            }

            return result.ToString();
        }
    }
}
